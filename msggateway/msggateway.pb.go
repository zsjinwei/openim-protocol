// Copyright Â© 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: msggateway/msggateway.proto

package msggateway

import (
	sdkws "github.com/openimsdk/protocol/sdkws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnlinePushMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgData      *sdkws.MsgData `protobuf:"bytes,1,opt,name=msgData,proto3" json:"msgData"`
	PushToUserID string         `protobuf:"bytes,2,opt,name=pushToUserID,proto3" json:"pushToUserID"`
}

func (x *OnlinePushMsgReq) Reset() {
	*x = OnlinePushMsgReq{}
	mi := &file_msggateway_msggateway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlinePushMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlinePushMsgReq) ProtoMessage() {}

func (x *OnlinePushMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlinePushMsgReq.ProtoReflect.Descriptor instead.
func (*OnlinePushMsgReq) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{0}
}

func (x *OnlinePushMsgReq) GetMsgData() *sdkws.MsgData {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *OnlinePushMsgReq) GetPushToUserID() string {
	if x != nil {
		return x.PushToUserID
	}
	return ""
}

type OnlinePushMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp []*SingleMsgToUserPlatform `protobuf:"bytes,1,rep,name=resp,proto3" json:"resp"`
}

func (x *OnlinePushMsgResp) Reset() {
	*x = OnlinePushMsgResp{}
	mi := &file_msggateway_msggateway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlinePushMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlinePushMsgResp) ProtoMessage() {}

func (x *OnlinePushMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlinePushMsgResp.ProtoReflect.Descriptor instead.
func (*OnlinePushMsgResp) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{1}
}

func (x *OnlinePushMsgResp) GetResp() []*SingleMsgToUserPlatform {
	if x != nil {
		return x.Resp
	}
	return nil
}

type SingleMsgToUserResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                     `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Resp       []*SingleMsgToUserPlatform `protobuf:"bytes,2,rep,name=resp,proto3" json:"resp"`
	OnlinePush bool                       `protobuf:"varint,3,opt,name=onlinePush,proto3" json:"onlinePush"`
}

func (x *SingleMsgToUserResults) Reset() {
	*x = SingleMsgToUserResults{}
	mi := &file_msggateway_msggateway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleMsgToUserResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMsgToUserResults) ProtoMessage() {}

func (x *SingleMsgToUserResults) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMsgToUserResults.ProtoReflect.Descriptor instead.
func (*SingleMsgToUserResults) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{2}
}

func (x *SingleMsgToUserResults) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SingleMsgToUserResults) GetResp() []*SingleMsgToUserPlatform {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *SingleMsgToUserResults) GetOnlinePush() bool {
	if x != nil {
		return x.OnlinePush
	}
	return false
}

type OnlineBatchPushOneMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgData       *sdkws.MsgData `protobuf:"bytes,1,opt,name=msgData,proto3" json:"msgData"`
	PushToUserIDs []string       `protobuf:"bytes,2,rep,name=pushToUserIDs,proto3" json:"pushToUserIDs"`
}

func (x *OnlineBatchPushOneMsgReq) Reset() {
	*x = OnlineBatchPushOneMsgReq{}
	mi := &file_msggateway_msggateway_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlineBatchPushOneMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineBatchPushOneMsgReq) ProtoMessage() {}

func (x *OnlineBatchPushOneMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineBatchPushOneMsgReq.ProtoReflect.Descriptor instead.
func (*OnlineBatchPushOneMsgReq) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{3}
}

func (x *OnlineBatchPushOneMsgReq) GetMsgData() *sdkws.MsgData {
	if x != nil {
		return x.MsgData
	}
	return nil
}

func (x *OnlineBatchPushOneMsgReq) GetPushToUserIDs() []string {
	if x != nil {
		return x.PushToUserIDs
	}
	return nil
}

type OnlineBatchPushOneMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinglePushResult []*SingleMsgToUserResults `protobuf:"bytes,1,rep,name=singlePushResult,proto3" json:"singlePushResult"`
}

func (x *OnlineBatchPushOneMsgResp) Reset() {
	*x = OnlineBatchPushOneMsgResp{}
	mi := &file_msggateway_msggateway_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnlineBatchPushOneMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineBatchPushOneMsgResp) ProtoMessage() {}

func (x *OnlineBatchPushOneMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineBatchPushOneMsgResp.ProtoReflect.Descriptor instead.
func (*OnlineBatchPushOneMsgResp) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{4}
}

func (x *OnlineBatchPushOneMsgResp) GetSinglePushResult() []*SingleMsgToUserResults {
	if x != nil {
		return x.SinglePushResult
	}
	return nil
}

type SingleMsgToUserPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode     int64  `protobuf:"varint,1,opt,name=ResultCode,proto3" json:"ResultCode"`
	RecvID         string `protobuf:"bytes,2,opt,name=RecvID,proto3" json:"RecvID"`
	RecvPlatFormID int32  `protobuf:"varint,3,opt,name=RecvPlatFormID,proto3" json:"RecvPlatFormID"`
}

func (x *SingleMsgToUserPlatform) Reset() {
	*x = SingleMsgToUserPlatform{}
	mi := &file_msggateway_msggateway_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleMsgToUserPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMsgToUserPlatform) ProtoMessage() {}

func (x *SingleMsgToUserPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMsgToUserPlatform.ProtoReflect.Descriptor instead.
func (*SingleMsgToUserPlatform) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{5}
}

func (x *SingleMsgToUserPlatform) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *SingleMsgToUserPlatform) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *SingleMsgToUserPlatform) GetRecvPlatFormID() int32 {
	if x != nil {
		return x.RecvPlatFormID
	}
	return 0
}

type GetUsersOnlineStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *GetUsersOnlineStatusReq) Reset() {
	*x = GetUsersOnlineStatusReq{}
	mi := &file_msggateway_msggateway_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersOnlineStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineStatusReq) ProtoMessage() {}

func (x *GetUsersOnlineStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineStatusReq.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineStatusReq) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{6}
}

func (x *GetUsersOnlineStatusReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type GetUsersOnlineStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuccessResult []*GetUsersOnlineStatusResp_SuccessResult `protobuf:"bytes,1,rep,name=successResult,proto3" json:"successResult"`
	FailedResult  []*GetUsersOnlineStatusResp_FailedDetail  `protobuf:"bytes,2,rep,name=failedResult,proto3" json:"failedResult"`
}

func (x *GetUsersOnlineStatusResp) Reset() {
	*x = GetUsersOnlineStatusResp{}
	mi := &file_msggateway_msggateway_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersOnlineStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineStatusResp) ProtoMessage() {}

func (x *GetUsersOnlineStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineStatusResp.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineStatusResp) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{7}
}

func (x *GetUsersOnlineStatusResp) GetSuccessResult() []*GetUsersOnlineStatusResp_SuccessResult {
	if x != nil {
		return x.SuccessResult
	}
	return nil
}

func (x *GetUsersOnlineStatusResp) GetFailedResult() []*GetUsersOnlineStatusResp_FailedDetail {
	if x != nil {
		return x.FailedResult
	}
	return nil
}

type SingleDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID              string                 `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Status              int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	SinglePlatformToken []*SinglePlatformToken `protobuf:"bytes,3,rep,name=singlePlatformToken,proto3" json:"singlePlatformToken"`
}

func (x *SingleDetail) Reset() {
	*x = SingleDetail{}
	mi := &file_msggateway_msggateway_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDetail) ProtoMessage() {}

func (x *SingleDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDetail.ProtoReflect.Descriptor instead.
func (*SingleDetail) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{8}
}

func (x *SingleDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SingleDetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SingleDetail) GetSinglePlatformToken() []*SinglePlatformToken {
	if x != nil {
		return x.SinglePlatformToken
	}
	return nil
}

type SinglePlatformToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformID int32    `protobuf:"varint,1,opt,name=platformID,proto3" json:"platformID"`
	Total      int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	Token      []string `protobuf:"bytes,3,rep,name=token,proto3" json:"token"`
}

func (x *SinglePlatformToken) Reset() {
	*x = SinglePlatformToken{}
	mi := &file_msggateway_msggateway_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinglePlatformToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePlatformToken) ProtoMessage() {}

func (x *SinglePlatformToken) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePlatformToken.ProtoReflect.Descriptor instead.
func (*SinglePlatformToken) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{9}
}

func (x *SinglePlatformToken) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *SinglePlatformToken) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SinglePlatformToken) GetToken() []string {
	if x != nil {
		return x.Token
	}
	return nil
}

type KickUserOfflineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformID     int32    `protobuf:"varint,1,opt,name=platformID,proto3" json:"platformID"`
	KickUserIDList []string `protobuf:"bytes,2,rep,name=kickUserIDList,proto3" json:"kickUserIDList"`
}

func (x *KickUserOfflineReq) Reset() {
	*x = KickUserOfflineReq{}
	mi := &file_msggateway_msggateway_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserOfflineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserOfflineReq) ProtoMessage() {}

func (x *KickUserOfflineReq) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserOfflineReq.ProtoReflect.Descriptor instead.
func (*KickUserOfflineReq) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{10}
}

func (x *KickUserOfflineReq) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *KickUserOfflineReq) GetKickUserIDList() []string {
	if x != nil {
		return x.KickUserIDList
	}
	return nil
}

type KickUserOfflineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KickUserOfflineResp) Reset() {
	*x = KickUserOfflineResp{}
	mi := &file_msggateway_msggateway_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickUserOfflineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserOfflineResp) ProtoMessage() {}

func (x *KickUserOfflineResp) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserOfflineResp.ProtoReflect.Descriptor instead.
func (*KickUserOfflineResp) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{11}
}

type MultiTerminalLoginCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	PlatformID int32  `protobuf:"varint,2,opt,name=platformID,proto3" json:"platformID"`
	Token      string `protobuf:"bytes,3,opt,name=token,proto3" json:"token"`
}

func (x *MultiTerminalLoginCheckReq) Reset() {
	*x = MultiTerminalLoginCheckReq{}
	mi := &file_msggateway_msggateway_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiTerminalLoginCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTerminalLoginCheckReq) ProtoMessage() {}

func (x *MultiTerminalLoginCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTerminalLoginCheckReq.ProtoReflect.Descriptor instead.
func (*MultiTerminalLoginCheckReq) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{12}
}

func (x *MultiTerminalLoginCheckReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MultiTerminalLoginCheckReq) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *MultiTerminalLoginCheckReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type MultiTerminalLoginCheckResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiTerminalLoginCheckResp) Reset() {
	*x = MultiTerminalLoginCheckResp{}
	mi := &file_msggateway_msggateway_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiTerminalLoginCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTerminalLoginCheckResp) ProtoMessage() {}

func (x *MultiTerminalLoginCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTerminalLoginCheckResp.ProtoReflect.Descriptor instead.
func (*MultiTerminalLoginCheckResp) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{13}
}

type GetUsersOnlineStatusResp_SuccessDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformID   int32  `protobuf:"varint,1,opt,name=platformID,proto3" json:"platformID"`
	ConnID       string `protobuf:"bytes,2,opt,name=connID,proto3" json:"connID"`
	IsBackground bool   `protobuf:"varint,3,opt,name=isBackground,proto3" json:"isBackground"`
	Token        string `protobuf:"bytes,4,opt,name=token,proto3" json:"token"`
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) Reset() {
	*x = GetUsersOnlineStatusResp_SuccessDetail{}
	mi := &file_msggateway_msggateway_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineStatusResp_SuccessDetail) ProtoMessage() {}

func (x *GetUsersOnlineStatusResp_SuccessDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineStatusResp_SuccessDetail.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineStatusResp_SuccessDetail) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) GetPlatformID() int32 {
	if x != nil {
		return x.PlatformID
	}
	return 0
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) GetConnID() string {
	if x != nil {
		return x.ConnID
	}
	return ""
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) GetIsBackground() bool {
	if x != nil {
		return x.IsBackground
	}
	return false
}

func (x *GetUsersOnlineStatusResp_SuccessDetail) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetUsersOnlineStatusResp_FailedDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
}

func (x *GetUsersOnlineStatusResp_FailedDetail) Reset() {
	*x = GetUsersOnlineStatusResp_FailedDetail{}
	mi := &file_msggateway_msggateway_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersOnlineStatusResp_FailedDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineStatusResp_FailedDetail) ProtoMessage() {}

func (x *GetUsersOnlineStatusResp_FailedDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineStatusResp_FailedDetail.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineStatusResp_FailedDetail) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{7, 1}
}

func (x *GetUsersOnlineStatusResp_FailedDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUsersOnlineStatusResp_SuccessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID               string                                    `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Status               int32                                     `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	DetailPlatformStatus []*GetUsersOnlineStatusResp_SuccessDetail `protobuf:"bytes,3,rep,name=detailPlatformStatus,proto3" json:"detailPlatformStatus"`
}

func (x *GetUsersOnlineStatusResp_SuccessResult) Reset() {
	*x = GetUsersOnlineStatusResp_SuccessResult{}
	mi := &file_msggateway_msggateway_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersOnlineStatusResp_SuccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineStatusResp_SuccessResult) ProtoMessage() {}

func (x *GetUsersOnlineStatusResp_SuccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_msggateway_msggateway_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineStatusResp_SuccessResult.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineStatusResp_SuccessResult) Descriptor() ([]byte, []int) {
	return file_msggateway_msggateway_proto_rawDescGZIP(), []int{7, 2}
}

func (x *GetUsersOnlineStatusResp_SuccessResult) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUsersOnlineStatusResp_SuccessResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUsersOnlineStatusResp_SuccessResult) GetDetailPlatformStatus() []*GetUsersOnlineStatusResp_SuccessDetail {
	if x != nil {
		return x.DetailPlatformStatus
	}
	return nil
}

var File_msggateway_msggateway_proto protoreflect.FileDescriptor

var file_msggateway_msggateway_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x6d, 0x73, 0x67,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0x11, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x11,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x72, 0x65, 0x73,
	0x70, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x75, 0x73, 0x68, 0x22, 0x71, 0x0a, 0x18, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x72, 0x0a, 0x19, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x79, 0x0a, 0x17, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x63, 0x76, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x50, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x76, 0x50, 0x6c, 0x61, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x26, 0x0a, 0x0c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0xae, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x14,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x61, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x12, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x69, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6a, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xa7, 0x05, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x5a, 0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d,
	0x73, 0x67, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x75, 0x73,
	0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d,
	0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72,
	0x0a, 0x15, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73,
	0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73,
	0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x7c, 0x0a, 0x1f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f,
	0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d,
	0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x60, 0x0a, 0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4b,
	0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x78, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x6d, 0x73, 0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x73,
	0x67, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msggateway_msggateway_proto_rawDescOnce sync.Once
	file_msggateway_msggateway_proto_rawDescData = file_msggateway_msggateway_proto_rawDesc
)

func file_msggateway_msggateway_proto_rawDescGZIP() []byte {
	file_msggateway_msggateway_proto_rawDescOnce.Do(func() {
		file_msggateway_msggateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_msggateway_msggateway_proto_rawDescData)
	})
	return file_msggateway_msggateway_proto_rawDescData
}

var file_msggateway_msggateway_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_msggateway_msggateway_proto_goTypes = []any{
	(*OnlinePushMsgReq)(nil),                       // 0: openim.msggateway.OnlinePushMsgReq
	(*OnlinePushMsgResp)(nil),                      // 1: openim.msggateway.OnlinePushMsgResp
	(*SingleMsgToUserResults)(nil),                 // 2: openim.msggateway.SingleMsgToUserResults
	(*OnlineBatchPushOneMsgReq)(nil),               // 3: openim.msggateway.OnlineBatchPushOneMsgReq
	(*OnlineBatchPushOneMsgResp)(nil),              // 4: openim.msggateway.OnlineBatchPushOneMsgResp
	(*SingleMsgToUserPlatform)(nil),                // 5: openim.msggateway.SingleMsgToUserPlatform
	(*GetUsersOnlineStatusReq)(nil),                // 6: openim.msggateway.GetUsersOnlineStatusReq
	(*GetUsersOnlineStatusResp)(nil),               // 7: openim.msggateway.GetUsersOnlineStatusResp
	(*SingleDetail)(nil),                           // 8: openim.msggateway.SingleDetail
	(*SinglePlatformToken)(nil),                    // 9: openim.msggateway.SinglePlatformToken
	(*KickUserOfflineReq)(nil),                     // 10: openim.msggateway.KickUserOfflineReq
	(*KickUserOfflineResp)(nil),                    // 11: openim.msggateway.KickUserOfflineResp
	(*MultiTerminalLoginCheckReq)(nil),             // 12: openim.msggateway.MultiTerminalLoginCheckReq
	(*MultiTerminalLoginCheckResp)(nil),            // 13: openim.msggateway.MultiTerminalLoginCheckResp
	(*GetUsersOnlineStatusResp_SuccessDetail)(nil), // 14: openim.msggateway.GetUsersOnlineStatusResp.SuccessDetail
	(*GetUsersOnlineStatusResp_FailedDetail)(nil),  // 15: openim.msggateway.GetUsersOnlineStatusResp.FailedDetail
	(*GetUsersOnlineStatusResp_SuccessResult)(nil), // 16: openim.msggateway.GetUsersOnlineStatusResp.SuccessResult
	(*sdkws.MsgData)(nil),                          // 17: openim.sdkws.MsgData
}
var file_msggateway_msggateway_proto_depIdxs = []int32{
	17, // 0: openim.msggateway.OnlinePushMsgReq.msgData:type_name -> openim.sdkws.MsgData
	5,  // 1: openim.msggateway.OnlinePushMsgResp.resp:type_name -> openim.msggateway.SingleMsgToUserPlatform
	5,  // 2: openim.msggateway.SingleMsgToUserResults.resp:type_name -> openim.msggateway.SingleMsgToUserPlatform
	17, // 3: openim.msggateway.OnlineBatchPushOneMsgReq.msgData:type_name -> openim.sdkws.MsgData
	2,  // 4: openim.msggateway.OnlineBatchPushOneMsgResp.singlePushResult:type_name -> openim.msggateway.SingleMsgToUserResults
	16, // 5: openim.msggateway.GetUsersOnlineStatusResp.successResult:type_name -> openim.msggateway.GetUsersOnlineStatusResp.SuccessResult
	15, // 6: openim.msggateway.GetUsersOnlineStatusResp.failedResult:type_name -> openim.msggateway.GetUsersOnlineStatusResp.FailedDetail
	9,  // 7: openim.msggateway.SingleDetail.singlePlatformToken:type_name -> openim.msggateway.SinglePlatformToken
	14, // 8: openim.msggateway.GetUsersOnlineStatusResp.SuccessResult.detailPlatformStatus:type_name -> openim.msggateway.GetUsersOnlineStatusResp.SuccessDetail
	0,  // 9: openim.msggateway.msgGateway.OnlinePushMsg:input_type -> openim.msggateway.OnlinePushMsgReq
	6,  // 10: openim.msggateway.msgGateway.GetUsersOnlineStatus:input_type -> openim.msggateway.GetUsersOnlineStatusReq
	3,  // 11: openim.msggateway.msgGateway.OnlineBatchPushOneMsg:input_type -> openim.msggateway.OnlineBatchPushOneMsgReq
	3,  // 12: openim.msggateway.msgGateway.SuperGroupOnlineBatchPushOneMsg:input_type -> openim.msggateway.OnlineBatchPushOneMsgReq
	10, // 13: openim.msggateway.msgGateway.KickUserOffline:input_type -> openim.msggateway.KickUserOfflineReq
	12, // 14: openim.msggateway.msgGateway.MultiTerminalLoginCheck:input_type -> openim.msggateway.MultiTerminalLoginCheckReq
	1,  // 15: openim.msggateway.msgGateway.OnlinePushMsg:output_type -> openim.msggateway.OnlinePushMsgResp
	7,  // 16: openim.msggateway.msgGateway.GetUsersOnlineStatus:output_type -> openim.msggateway.GetUsersOnlineStatusResp
	4,  // 17: openim.msggateway.msgGateway.OnlineBatchPushOneMsg:output_type -> openim.msggateway.OnlineBatchPushOneMsgResp
	4,  // 18: openim.msggateway.msgGateway.SuperGroupOnlineBatchPushOneMsg:output_type -> openim.msggateway.OnlineBatchPushOneMsgResp
	11, // 19: openim.msggateway.msgGateway.KickUserOffline:output_type -> openim.msggateway.KickUserOfflineResp
	13, // 20: openim.msggateway.msgGateway.MultiTerminalLoginCheck:output_type -> openim.msggateway.MultiTerminalLoginCheckResp
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_msggateway_msggateway_proto_init() }
func file_msggateway_msggateway_proto_init() {
	if File_msggateway_msggateway_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msggateway_msggateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msggateway_msggateway_proto_goTypes,
		DependencyIndexes: file_msggateway_msggateway_proto_depIdxs,
		MessageInfos:      file_msggateway_msggateway_proto_msgTypes,
	}.Build()
	File_msggateway_msggateway_proto = out.File
	file_msggateway_msggateway_proto_rawDesc = nil
	file_msggateway_msggateway_proto_goTypes = nil
	file_msggateway_msggateway_proto_depIdxs = nil
}
